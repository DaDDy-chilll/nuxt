1.Page & Routing ----------------------

-Nuxt file-system routing creates a route for every file in the pages/ directory.

 <NuxtLayout>
      <header>
        <ul>
          <li>
            <NuxtLink to="/">Home</NuxtLink>
          </li>
          <li>
            <NuxtLink to="/events">Events</NuxtLink>
          </li>
        </ul>
      </header>
      <NuxtPage />
    </NuxtLayout>
    
   const nuxt = useNuxtApp();
-useNuxtApp is a built-in composable that provides a way to access shared runtime context of Nuxt, also known as the Nuxt context, which is available on both client and server side (but not within Nitro routes). It helps you access the Vue app instance, runtime hooks, runtime config variables and internal states, such as ssrContext and payload.
_____________________________________________________________
2.Components ----------------------

_____________________________________________________________
3.Layouts ----------------------

	<script setup>
	definePageMeta({
  	layout: "custom",
	});
	</script>
_____________________________________________________________
4.Images & assets ----------------------

-The public/ directory content is served at the server root as-is.
	*The public/ directory is used as a public server for static assets publicly available at a defined URL of your application.
	*You can get a file in the public/ directory from your application's code or from a browser by the root URL /.

-The assets/ directory contains by convention every asset that you want the build tool (Vite or webpack) to process.
	*By convention, Nuxt uses the assets/ directory to store these files but there is no auto-scan functionality for this directory, and you can use any other name for it.


_____________________________________________________________
5.Composables ----------------------

Like React Custom Hook
composables
  |_use*.vue	

https://vueuse.org/core/onClickOutside/


_____________________________________________________________
6.Plugins ----------------------

plugins
  |_myPlugin.ts

export default defineNuxtPlugin(nuxtApp => {
    return {
        provide: {
            sayHello: (msg:string) => console.log('Hello', msg)
        }
    }
})

_____________________________________________________________
7.Middlewares ----------------------

-Nuxt provides a customizable route middleware framework you can use throughout your application, ideal for extracting code that you want to run before navigating to a particular route.

-global middleware file name is *.global.ts

export default defineNuxtRouteMiddleware((to, from) => {
  console.log('to', to);
  console.log('from', from);
  
  // const isLogin = false;

  // if (!isLogin) {
  //   return navigateTo(to.fullPath);
  // }

  // return navigateTo('/login');

    // if (to.params.id === '1') {
    //   return abortNavigation()
    // }
    // // In a real app you would probably not redirect every route to `/`
    // // however it is important to check `to.path` before redirecting or you
    // // might get an infinite redirect loop
    // if (to.path !== '/') {
    //   return navigateTo('/')
    // }
  })

-custome middleware define in custome page

definePageMeta({
  middleware: 'custom'
})

_____________________________________________________________
8.Modules ----------------------

-https://nuxt.com/modules

_____________________________________________________________
9.State management ----------------------

-useState is an SSR-friendly ref replacement. Its value will be preserved after server-side rendering (during client-side hydration) and shared across all components using a unique key.

-Instead use const useX = () => useState('x')
const counter = useState('counter', () => Math.round(Math.random() * 1000))

#Vue State Management with Pinia
npm install pinia
-import { createPinia } from 'pinia'
-const pinia = createPinia()
-app.use(pinia)

--
//Vue 3 composition API
export const useCounterStore = defineStore('counter', () => {
    const count = ref(0)
    const name = ref('Eduardo')
    const doubleCount = computed(() => count.value * 2)
    function increment() {
      count.value++
    }
  
    return { count, name, doubleCount, increment }
  })

//Vue 2 option
export const useCounterStore = defineStore('counter', {
    state: () => ({ count: 0, name: 'Eduardo' }),
    getters: {
      doubleCount: (state) => state.count * 2,
    },
    actions: {
      increment() {
        this.count++
      },
    },
  })

_____________________________________________________________
10.SSR,SWR & Hybrid ----------------------
_____________________________________________________________
11.Server ----------------------

-| server/
---| api/
-----| hello.ts      # /api/hello
---| routes/
-----| bonjour.ts    # /bonjour
---| middleware/
-----| log.ts  

-<script setup lang="ts">
const { data } = await useFetch('/api/hello')
</script>

<template>
  <pre>{{ data }}</pre>
</template>

_____________________________________________________________
12.Nitro ----------------------
_____________________________________________________________
13.useFetch, useLazyFetch ----------------------

useFetch ( Univarsal Fetch)
-const { data:jobs } = await useFetch('/hello',{transform:(_jobs) => _jobs.data});

useLazyFetch 
-const { data:jobs,pending } = await useLazyFetch('/hello');


_____________________________________________________________
14.useAsyncData ----------------------
-no loading fetch
const { data:count,pending } = await useAsyncData('count',() => $fetch('/api/count'));

const refreshCount = () => refreshNuxtData('count');

15.SEO & Metas ----------------------
16.Lifecycles hooks ----------------------
17.Config ----------------------
18.Nuxt-Content ----------------------
19.Full-Stack app:docs + API ----------------------
